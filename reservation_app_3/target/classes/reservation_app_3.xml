<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd">
    <amqp:connector name="AMQP_0_9_Connector_ip" validateConnections="true" host="${rabbitmq.host}" doc:name="AMQP-0-9 Connector"/>
    <amqp:endpoint exchangeName="${app_3_input_exchange}" queueName="${app_3_input_queue}" exchangeType="topic" exchangeDurable="true" name="AMQP_0_9_ip" responseTimeout="10000" doc:name="AMQP-0-9"/>
    <amqp:connector name="AMQP_0_9_Connector_op" validateConnections="true" host="${rabbitmq.host}" doc:name="AMQP-0-9 Connector"/>
    <amqp:endpoint exchangeName="${app_3_output_exchange}" queueName="${app_3_output_queue}" exchangeType="topic" exchangeDurable="true" name="AMQP_0_9_op" responseTimeout="10000" doc:name="AMQP-0-9"/>
    <flow name="reservation_app_3Flow">
        
        <amqp:inbound-endpoint exchangeName="${app_3_input_exchange}" queueName="${app_3_input_queue}" exchangeType="topic" exchangeDurable="true" responseTimeout="10000"  connector-ref="AMQP_0_9_Connector_ip" ref="AMQP_0_9_ip" doc:name="app_3_input_q"/>
        
        <logger message="Message Payload : #[message.payloadAs(String)]" level="INFO" doc:name="Logger"/>
        
        
        <set-variable variableName="originalPayload" value="#[message.payload]"
			doc:name="Set Original Payload" />
			
		<json:json-to-object-transformer
			returnClass="java.lang.Object" doc:name="JSON to Object" />
        
        <set-variable variableName="hostName" value="#[server.host]" doc:name="Set Host Name"/>

		<set-variable variableName="uuid" value="#[payload.reservation_id]"
			doc:name="Set UUID"/>
			
        <set-variable variableName="startTime" value="#[server.dateTime]" doc:name="Set Start Time"/>
        

		<async doc:name="log start">
			<dw:transform-message doc:name="build log message">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "apiname": "reservation_app_3",
  "uuid": flowVars.uuid,
  "message": "application 3 reading message from app_3_input_q",
  "status": 200,
  "timestamp": flowVars.startTime,
  "hostName": flowVars.hostName,
  "stepIdentifier": "RESERVATION_APP_3_START",
  "additionalKeys": {
    "key1": "value1",
    "key2": "value2"
  }
}]]></dw:set-payload>
			</dw:transform-message>
			<logger message="#[payload]" level="INFO" doc:name="Logger" />
			<http:request config-ref="HTTP_Request_Configuration_elk"
				path="${elk.http.basepath}" method="POST" doc:name="HTTP">
				<http:request-builder>
					<http:header headerName="Content-Type" value="application/json" />
				</http:request-builder>
			</http:request>
			<logger message="#[message.inboundProperties.'http.status']"
				level="INFO" doc:name="Logger" />
		</async>
        
        
        <expression-component doc:name="Expression"><![CDATA[Thread.sleep(3500);]]></expression-component>
		
        
        <set-variable variableName="endTime" value="#[server.dateTime]" doc:name="Set end Time"/>
        

		<async doc:name="log end">
			<dw:transform-message doc:name="build log message">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "apiname": "reservation_app_3",
  "uuid": flowVars.uuid,
  "message": "application 3 sending message to app_3_output_q",
  "status": 200,
  "timestamp": flowVars.endTime,
  "hostName": flowVars.hostName,
  "stepIdentifier": "RESERVATION_APP_3_END",
  "additionalKeys": {
    "key1": "value1",
    "key2": "value2"
  }
}]]></dw:set-payload>
			</dw:transform-message>
			<logger message="#[payload]" level="INFO" doc:name="Logger" />
			<http:request config-ref="HTTP_Request_Configuration_elk"
				path="${elk.http.basepath}" method="POST" doc:name="HTTP">
				<http:request-builder>
					<http:header headerName="Content-Type" value="application/json" />
				</http:request-builder>
			</http:request>
			<logger message="#[message.inboundProperties.'http.status']"
				level="INFO" doc:name="Logger" />
		</async>
        
        <expression-component doc:name="Expression"><![CDATA[Thread.sleep(85);]]></expression-component>
		
        
        <set-payload value="#[flowVars.originalPayload]" doc:name="Set Rabbit Payload"
			mimeType="application/json" />
        
        
        <amqp:outbound-endpoint exchangeName="${app_3_output_exchange}" queueName="${app_3_output_queue}" exchangeType="topic" exchangeDurable="true" responseTimeout="10000" connector-ref="AMQP_0_9_Connector_op" ref="AMQP_0_9_op" doc:name="app_3_output_q"/>
    
    
    
    </flow>
</mule>
